#include <math.h>
#include <opencv2/core.hpp>
#include <opencv2/core/core.hpp>  
#include <opencv2/imgproc.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>





//input  : image and exposure
//output : exposure 
//1、calc 7 gamma image
//2、gradient information
//3、choose the best 
//4、calc exposure
//d0 is a noise gate(0 -- 1), d1 is lamda（10,100,1000..）,d3 is Kp (0.2,0.5,1.0)

class AeController{

public:

    AeController(int rows,int cols,float d0,float d1,float d3,float d4)
    {
        height = rows;
        width = cols;

        delta = d0;
        lambda = d1;

        N = logf(lambda*(1-delta )+1);
        Kp = d3;
        d = d4;

        for(int i=0;i<7;i++)
        {
            gammaImg[i] = new cv::Mat(height,width,CV_8UC1);
            grdtImg[i]  = new cv::Mat(height-2,width-2,CV_32FC1); 
        }

    }

    ~AeController()
    {
        for(int i=0;i<7;i++)
        {
            delete gammaImg[i];
            delete grdtImg[i];
        }
    }
    

    void addImage(const cv::Mat *Image,int exposure)
    {
        curImg = Image;
        curExposure = exposure;
    
    }


    float calcExposure(void)
    {
        gammaCorrect(curImg);
        makeG();

        // float ret = linearUpdate();
        float ret = nonLinearUpdate();

        return ret;


    }
private:

    const cv::Mat *curImg;
  
    int curExposure;
    int height;
    int width;
    float delta;
    float lambda;
    float N;
    float Kp;
    float d;


    cv::Mat* gammaImg[7];
    cv::Mat* grdtImg[7];

    float gradInfo[7];  

 
    const uint8_t gamaTable[7][256] = {
    {9,16,21,26,30,33,36,39,42,44,47,49,51,53,55,58,59,
     61,63,65,67,69,70,72,73,75,77,78,80,81,83,84,85,87,
     88,90,91,92,93,95,96,97,98,100,101,102,103,104,106,
     107,108,109,110,111,112,113,115,116,117,118,119,120,
     121,122,123,124,125,126,127,128,129,130,131,132,133,
     134,135,135,136,137,138,139,140,141,142,143,144,144,
     145,146,147,148,149,150,151,151,152,153,154,155,156,
     156,157,158,159,160,160,161,162,163,164,164,165,166,
     167,167,168,169,170,170,171,172,173,173,174,175,176,
     176,177,178,179,179,180,181,181,182,183,184,184,185,
     186,186,187,188,188,189,190,191,191,192,193,193,194,
     195,195,196,197,197,198,199,199,200,201,201,202,202,
     203,204,204,205,206,206,207,208,208,209,209,210,211,
     211,212,213,213,214,214,215,216,216,217,218,218,219,
     219,220,221,221,222,222,223,224,224,225,225,226,226,
     227,228,228,229,229,230,231,231,232,232,233,233,234,
     235,235,236,236,237,237,238,238,239,240,240,241,241,
     242,242,243,243,244,245,245,246,246,247,247,248,248,
     249,249,250,250,251,252,252,253,253,254,254,255},
    {3,7,11,14,16,19,21,23,25,27,29,31,33,35,37,38,40,42,
     43,45,47,48,50,51,53,54,55,57,58,60,61,62,64,65,66,68,
     69,70,71,73,74,75,76,78,79,80,81,82,83,85,86,87,88,89,
     90,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,
     107,108,109,110,111,112,113,114,115,116,117,118,119,120,
     121,122,123,124,125,126,127,128,129,130,131,132,133,134,
     134,135,136,137,138,139,140,141,142,143,143,144,145,146,
     147,148,149,150,150,151,152,153,154,155,156,156,157,158,
     159,160,161,162,162,163,164,165,166,167,167,168,169,170,
     171,171,172,173,174,175,175,176,177,178,179,179,180,181,
     182,183,183,184,185,186,187,187,188,189,190,190,191,192,
     193,193,194,195,196,197,197,198,199,200,200,201,202,203,
     203,204,205,206,206,207,208,208,209,210,211,211,212,213,
     214,214,215,216,217,217,218,219,219,220,221,222,222,223,
     224,224,225,226,227,227,228,229,229,230,231,231,232,233,
     234,234,235,236,236,237,238,238,239,240,240,241,242,243,
     243,244,245,245,246,247,247,248,249,249,250,251,251,252,
     253,253,254,255},
    {0,3,4,6,8,9,11,13,14,15,17,18,20,21,22,24,25,26,28,29,
     30,31,33,34,35,36,38,39,40,41,42,44,45,46,47,48,49,51,52,
     53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,70,71,72,73,
     74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,
     94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,
     110,111,112,113,114,114,115,116,117,118,119,120,121,122,123,
     124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,
     138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,
     152,153,154,155,156,157,158,159,160,161,162,163,163,164,165,
     166,167,168,169,170,171,172,172,173,174,175,176,177,178,179,
     180,181,181,182,183,184,185,186,187,188,189,189,190,191,192,
     193,194,195,196,196,197,198,199,200,201,202,203,203,204,205,
     206,207,208,209,210,210,211,212,213,214,215,216,216,217,218,
     219,220,221,222,222,223,224,225,226,227,228,228,229,230,231,
     232,233,234,234,235,236,237,238,239,239,240,241,242,243,244,
     245,245,246,247,248,249,250,250,251,252,253,254,255},
    {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,
     23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,
     43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,
     63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,
     83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,
     103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,
     119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,
     135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,
     151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,
     167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,
     183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,
     199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,
     215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,
     231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,
     247,248,249,250,251,252,253,254,255},
    {0,0,0,0,1,2,2,3,3,4,5,5,6,6,7,8,9,9,10,11,11,12,13,14,14,15,16,
     17,17,18,19,20,21,21,22,23,24,25,25,26,27,28,29,30,30,31,32,33,
     34,35,36,36,37,38,39,40,41,42,43,43,44,45,46,47,48,49,50,51,52,
     53,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
     73,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,
     93,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,
     112,113,114,115,116,117,118,119,120,121,123,124,125,126,127,128,129,
     130,131,132,133,134,135,136,138,139,140,141,142,143,144,145,146,147,
     148,150,151,152,153,154,155,156,157,158,160,161,162,163,164,165,166,
     167,168,170,171,172,173,174,175,176,177,179,180,181,182,183,184,185,
     187,188,189,190,191,192,193,195,196,197,198,199,200,201,203,204,205,
     206,207,208,210,211,212,213,214,215,217,218,219,220,221,222,224,225,
     226,227,228,229,231,232,233,234,235,237,238,239,240,241,242,244,245,
     246,247,248,250,251,252,253,254},
    {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,3,3,4,4,4,5,5,6,6,7,7,8,8,9,9,10,10,
     11,11,12,12,13,13,14,15,15,16,16,17,18,18,19,19,20,21,21,22,23,23,24,
     25,26,26,27,28,28,29,30,31,31,32,33,34,34,35,36,37,38,38,39,40,41,42,
     42,43,44,45,46,47,48,48,49,50,51,52,53,54,55,56,56,57,58,59,60,61,62,
     63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,
     86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,108,
     109,110,111,112,113,114,116,117,118,119,120,121,123,124,125,126,127,128,
     130,131,132,133,134,136,137,138,139,141,142,143,144,146,147,148,149,151,
     152,153,154,156,157,158,159,161,162,163,165,166,167,169,170,171,172,174,
     175,176,178,179,180,182,183,184,186,187,189,190,191,193,194,195,197,198,
     199,201,202,204,205,206,208,209,211,212,213,215,216,218,219,221,222,223,
     225,226,228,229,231,232,234,235,236,238,239,241,242,244,245,247,248,250,
     251,253,254},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,5,
     5,5,6,6,6,7,7,7,8,8,9,9,9,10,10,11,11,12,12,13,13,14,14,14,15,16,16,17,
     17,18,18,19,19,20,20,21,22,22,23,24,24,25,25,26,27,27,28,29,29,30,31,32,
     32,33,34,34,35,36,37,38,38,39,40,41,42,42,43,44,45,46,47,47,48,49,50,51,
     52,53,54,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,
     75,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,95,96,97,98,99,101,102,
     103,104,106,107,108,109,111,112,113,115,116,117,119,120,121,123,124,125,127,
     128,129,131,132,134,135,136,138,139,141,142,144,145,146,148,149,151,152,154,
     155,157,158,160,161,163,165,166,168,169,171,172,174,176,177,179,180,182,184,
     185,187,188,190,192,193,195,197,198,200,202,204,205,207,209,210,212,214,216,
     217,219,221,223,225,226,228,230,232,234,235,237,239,241,243,245,247,248,250,252,254}}; 
    
    //1/1.9 1/1.5 1/1.2 1.2 1.5 1.9
    const float gamma[7] = {0.526315789,0.666666667,0.833333333,1.0,1.2,1.5,1.9}; 
    



    void gammaCorrect(const cv::Mat *pImg)
    {
        // 6 -- 8 ms
        // struct timeval tv0, tv1;
        // gettimeofday(&tv0, NULL);

        uint8_t *q = pImg->data;

        for(int i = 0;i<7;i++)
        {
            uint8_t *p = gammaImg[i]->data;
            if(3 == i)
            {
                memcpy(p, q, height*width);
            }
            else
            {
                
                const uint8_t *g = &gamaTable[i][0];
                
                for(int k = 0; k<height*width;k++)
                {
                    p[k] = g[q[k]];
                }
            }

        }

    }

    void makeG(void)
    {
        // struct timeval tv0, tv1;
        // gettimeofday(&tv0, NULL);

        for(int i=0;i<7;i++)
        {
            gradInfo[i] = 0.f;
#if 0
            float *p = grdtImg[i]->ptr<float>(0);
            uint8_t *q = gammaImg[i]->ptr<uint8_t>(0);

            for(int k=0;k<(height-2)*(width-2);k++)
            {
                int row = k/(width-2);
                int col = k%(width-2);
                float dx = 0.5f*(q[(row+1)*width+col+2]-q[(row+1)*width+col]);
                float dy = 0.5f*(q[(row+2)*width+col+1]-q[row*width+col+1]);
                
                // float dx = 0.5f*(q[k+1,m+2]-q[k+1,m]);
                // float dy = 0.5f*(q[k+2,m+1]-q[k,m+1]);

                float absqu = dx*dx + dy*dy;
                p[k] = absqu;
            }
#else
            
            for(int k=0;k<height-2;k++)
            {
                float *p = grdtImg[i]->ptr<float>(k);
                for(int m=0;m<width-2;m++)
                {
                #if 0
                    uint8_t *gamma = gammaImg[i]->ptr<uint8_t>(k+1,m+1);
                    float dx = 0.5f * (*(gamma+1) - *(gamma-1));
                    float dy = 0.5f * (*(gamma+width) - *(gamma-width));
                #else

                    float dx = 0.5f*(gammaImg[i]->at<uint8_t>(k+1,m+2)-gammaImg[i]->at<uint8_t>(k+1,m));
                    float dy = 0.5f*(gammaImg[i]->at<uint8_t>(k+2,m+1)-gammaImg[i]->at<uint8_t>(k,m+1));
                #endif

                    p[m] = (dx*dx + dy*dy)/255.0;
                    // p[m] /= 255.f;
                    if(p[m] >= delta)
                    {
                        gradInfo[i] += 1.f/N*log(lambda*(p[m]-delta)+1);
                    }
                }
            }
#endif
        }

    }




    float chooseTheBest(void)
    {
        float tmp = gradInfo[0];
        int index = 0;
        for(int i=1;i<7;i++)
        {
            if(tmp<gradInfo[i])
            {
                tmp = gradInfo[i];
                index = i;
            }

        }
        return gamma[index];
    }


    float linearUpdate(void)
    {
        float gammaHat = chooseTheBest();
        float alpha;
        if(gammaHat>=1.f)
        {
            alpha = 0.5;
        }
        else
        {
            alpha = 1.f;
        }


        return (1.f+alpha*Kp*(1.f-gammaHat))*curExposure;
    }


    float nonLinearUpdate(void)
    {
        // imprlog("current exposur : %d",curExposure);

        // struct timeval tv0, tv1;
        // gettimeofday(&tv0, NULL);
        
        float gammaHat = chooseTheBest();
        
        // gettimeofday(&tv1, NULL);
        // timersub(&tv1, &tv0, &tv1);
        // imprlog("takes %lu.%06lu", tv1.tv_sec, tv1.tv_usec);
        // imprlog("current best gamma : %f",gammaHat);
        float alpha;
        if(gammaHat>=1.f)
        {
            alpha = 0.5;
        }
        else
        {
            alpha = 1.f;
        }
        float tmp = 2.0 - gammaHat;
        float tmp2 = atanf(1.0 / d);

        
        float R = d * tanf(tmp * tmp2 -tmp2) + 1.0;
 
        // return (1.f + alpha*Kp*(R − 1.f))*curExposure ;
        return (alpha*Kp*(R - 1.f) + 1.f)*curExposure;


    }

};
